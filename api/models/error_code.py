"""
    Title: Rate Log Model
    Description: This file will contain functions for Rate Log Model.
        - 0 to 1999: ubbe Website Errors
        - 2000 to 4999: ubbe Api Errors
        - 5000 to 6999: Fetchable Errors
        - 7000 to 8999: DeliverEase Errors
        - 9000 to 10999: BBEX Website Errors

    Created: April 23, 2021
    Author: Carmichael
    Edited By:
    Edited Date:
"""
import uuid

from django.db.models import CharField, UUIDField, TextField
from django.db.models.fields import DateTimeField

from api.globals.project import LETTER_MAPPING_LEN, API_SYSTEMS, DEFAULT_CHAR_LEN, DEFAULT_TEXT_LEN
from api.models.base_table import BaseTable


class ErrorCode(BaseTable):
    """
        Error Code Database Table
    """
    error_id = UUIDField(unique=True, editable=False, help_text="Autogenerated error code.")
    creation_date = DateTimeField(auto_now_add=True, help_text="Date of error code was created.")
    updated_date = DateTimeField(null=True, blank=True, help_text="Date of error code was updated.")
    system = CharField(max_length=LETTER_MAPPING_LEN * 5, choices=API_SYSTEMS)
    source = CharField(max_length=DEFAULT_CHAR_LEN, help_text="source of error. IE Main, Location, Carrier, etc.")
    type = CharField(max_length=DEFAULT_CHAR_LEN, help_text="Type of error. IE Ratee, Ship, Track, Province.")
    code = CharField(max_length=DEFAULT_CHAR_LEN, help_text="Error code assigned to line up in the code base.")
    name = CharField(max_length=DEFAULT_CHAR_LEN, help_text="Name of the error.")
    actual_message = CharField(max_length=DEFAULT_CHAR_LEN, help_text="Actual message of the error.")
    solution = TextField(
        max_length=DEFAULT_TEXT_LEN,
        help_text="Potential solution to the error.",
        default="This error requires developers to look into the issue."
    )
    location = CharField(max_length=DEFAULT_CHAR_LEN, help_text="Location in the codebase.", default="Location needed.")

    class Meta:
        verbose_name = "Error Code"
        verbose_name_plural = "Error Codes"

    @staticmethod
    def generate_unique_code() -> uuid.uuid4():
        """
            Generate unique UUID for error code to be placed in code
            :return: UUID
        """
        error_id = uuid.uuid4()

        while ErrorCode.objects.filter(error_id=error_id).exists():
            error_id = uuid.uuid4()

        return error_id

    # Override
    def save(self, *args, **kwargs) -> None:
        self.error_id = self.generate_unique_code()
        self.clean_fields()
        self.validate_unique()
        super().save(*args, **kwargs)

    # Override
    def __repr__(self) -> str:
        return f"< ErrorCode ({self.system}, {self.code}, {self.name})) >"

    # Override
    def __str__(self) -> str:
        return f"{self.system}-{self.type}-{self.code}-{self.name}"
